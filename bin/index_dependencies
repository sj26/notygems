#!/usr/bin/env ruby

# Prepare an index for the rubygems dependencies api from the quick index
# 
# Creates files like:
#
#   db/dependencies/rails.gemdeps.rz
#
# Which is a Marshal-encoded, deflated array of basic version and dependency info
# as required by the rubygems/bundler dependency api, similar to the quick index.
# The dependency api then just has to marshal load each file for each requested
# gem name, concat them together, and marshal dump the result.
#

require "rubygems/package"

# Some specs have marshaled Date instead of Time, or require the extra parsers
require "date"

puts "Build dependencies index..."
Dir.chdir(File.join(__dir__, "..")) do
  system "mkdir", "-p", "db/dependencies" or raise $?
  Dir.each_child("public/quick/Marshal.4.8") do |filename| # => "rails-5.0.0.gemspec.rz"
    if File.fnmatch("*.gemspec.rz", filename)
      path = File.join("public/quick/Marshal.4.8", filename) # => "public/quick/Marshal.4.8/rails-5.0.0.gemspec.rz"
      begin
        spec = Marshal.load(Gem.inflate(File.binread(path))) # => #<Gem::Specification name="rails" version="5.0.0" platform="ruby" ...>

        deps_filename = "#{spec.name}.gemdeps.rz" # => "rails.gemdeps.rz"
        deps_path = "db/dependencies/#{deps_filename}" # => "db/dependencies/rails.gemdeps.rz"

        deps = if File.exist? deps_path
                 begin
                   Marshal.load(Gem.inflate(File.binread(deps_path)))
                 rescue
                   puts "failed loading #{deps_filename} (removed):", "  #{$!.class.name}: #{$!}"
                   File.unlink(deps_path)
                   []
                 end
               else
                 []
               end

        dep_name = spec.name.to_s
        dep_number = spec.version.to_s
        dep_platform = spec.platform.to_s

        unless deps.find { |dep| dep[:name] == dep_name && dep[:number] == dep_number && dep[:platform] == dep_platform }
          deps << {
            name: dep_name,
            number: dep_number,
            platform: dep_platform,
            dependencies: spec.dependencies.reject { |d| d.type == :development }.map { |dependency|
              [dependency.name.to_s, *dependency.requirements_list.map(&:to_s)]
            },
          }
          File.binwrite(deps_path, Gem.deflate(Marshal.dump(deps)))
          puts "indexed #{filename}"
        end
      rescue
        puts "failed indexing #{filename}", "  #{$!.class}: #{$!}"
      end
    end
  end
end
puts "Done!"
